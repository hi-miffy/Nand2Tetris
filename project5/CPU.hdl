// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	Not(in=instruction[15], out=sel1);
	Mux16(a=outALU, b=instruction, sel=sel1, out=outMux1);

	
	Or(a=sel1, b=instruction[5], out=loada);
	ARegister(in=outMux1, load=loada, out=aRegister, out[0..14]=addressM);
	And(a=instruction[12], b=instruction[15], out=loadmux);
	Mux16(a=aRegister, b=inM, sel=loadmux, out=outMux2);
	And(a=instruction[4], b=instruction[15], out=loadd);
	DRegister(in=outALU, load=loadd, out=dRegister);
	ALU(x=dRegister, y=outMux2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zr, ng=ng);

	Not(in=instruction[0], out=not0);
	Not(in=instruction[1], out=not1);
	Not(in=instruction[2], out=not2);
	Not(in=zr, out=notzr);
	Not(in=ng, out=notng);


//PC.load = [0]*[1]*[2] + zr*not0*[1]*not2 + notzr*[0]*not1*[2] + ng*not0*not1*[2] + notzr*notng*[0]*not1*not2 + (notzr*notng+zr)*[0]*[1]*not2 + (ng+zr)*not0*[1]*[2]
//PC.inc = 1

//m1
	And(a=instruction[0], b=instruction[1], out=l1);
	And(a=l1, b=instruction[2], out=m1);
//m2
	And(a=zr, b=not0, out=l2);
	And(a=l2, b=instruction[1], out=l3);
	And(a=l3, b=not2, out=m2);
//m3
	And(a=notzr, b=instruction[0], out=l4);
	And(a=l4, b=not1, out=l5);
	And(a=l5, b=instruction[2], out=m3);
//m4
	And(a=ng, b=not0, out=l6);
	And(a=l6, b=not1, out=l7);
	And(a=l7, b=instruction[2], out=m4);
//m5
	And(a=notzr, b=notng, out=o3);
	And(a=o3, b=instruction[0], out=o4);
	And(a=o4, b=not1, out=o5);
	And(a=o5, b=not2, out=m5);
//m6
	Or(a=o3, b=zr, out=p1);
	And(a=p1, b=l1, out=p2);
	And(a=p2, b=not2, out=m6);
//m7
	Or(a=ng, b=zr, out=p3);
	And(a=p3, b=not0, out=p4);
	And(a=p4, b=instruction[1], out=p5);
	And(a=p5, b=instruction[2], out=m7);
//inc
	//Not(in=m, out=o2);
	
	Or(a=m1, b=m2, out=q1);
	Or(a=q1, b=m3, out=q2);
	Or(a=q2, b=m4, out=q3);
	Or(a=q3, b=m5, out=q4);
	Or(a=q4, b=m6, out=q5);
	Or(a=q5, b=m7, out=m);
	And(a=m, b=instruction[15], out=mm);
	PC(in=aRegister, load=mm, inc=true, reset=reset, out[0..14]=pc);
	And(a=instruction[15], b=instruction[3], out=writeM);
}
